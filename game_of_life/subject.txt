Archivos enviados: *.c, *.h
Funciones permitidas: atoi, read, putchar, malloc, calloc, realloc, free

Prototipo del programa: ./life width height iterations

Ancho y alto son las dimensiones del tablero, e iterations es el número de iteraciones del juego de la vida.

La configuración inicial del tablero se dibujará mediante una secuencia de comandos en la entrada estándar.

Imagina un bolígrafo que comienza en la esquina superior izquierda del tablero.
Cada comando es uno de estos caracteres:

w a s d -> mueve el bolígrafo hacia arriba, izquierda, abajo y derecha.

x -> levanta o baja el bolígrafo para comenzar o detener el dibujo.

El bolígrafo no se mueve fuera del tablero y permanece inmóvil si se lo solicita un comando.

El bolígrafo no hace nada si el comando no es válido.

Una vez alcanzado el final del archivo, el programa debe simular un juego de vida en el tablero 
e imprimir el resultado en la salida estándar (cada celda activa se representará con el carácter 
'0' y cada celda inactiva se representará con un espacio). Cada celda fuera del array se considerará inactiva.

Ejemplos:

$> echo 'sdxddssaaww' | ./a.out 5 5 0 | cat -e
$
000 $
0 0 $
000 $
$
$> echo 'sdxssdswdxdddxsaddawxwdxwaa' | ./a.out 10 6 0 | cat -e
$
0 000 $
0 0 $
000 0 $
0 000 $
$
$> echo 'dxss' | ./a.out 3 3 0 | cat -e
0 $
0 $
0 $
$> echo 'dxss' | ./a.out 3 3 1 | cat -e
$
000$
$
$> echo 'dxss' | ./a.out 3 3 2 | cat -e
0 $
0 $
0 $




















Submitted files: *.c, *.h
Allowed functions: atoi, read, putchar, malloc, calloc, realloc, free

Prototype of program: ./life width height iterations

Width and height are the dimensions of the board and iterations is the number of iterations of the game of life.

The initial configuration of the board will be drawn by a sequence of commands in the standard input.

Imagine a pen starting in the top left corner of the board.
Each command is one of these characters:
	w a s d -> move the pen up, left, bottom, and right.
	x 		-> lift or lower the pen in order to start or stop drawing.

pen no move outside board and stays still if a command ask for it.
pen do nothing in case of invalid command.

once end of file is reached, your program must simulate a game of life on
board and print the result in stdout (each cell alive will be represented l
the character '0' and each dead cell will be represented by a space)
each cell outside of the array will be considered dead.

Examples:

$> echo 'sdxddssaaww' | ./a.out 5 5 0 | cat -e
     $
 000 $
 0 0 $
 000 $
     $
$> echo 'sdxssdswdxdddxsaddawxwdxwaa' | ./a.out 10 6 0 | cat -e
          $
 0   000  $
 0     0  $
 000  0   $
  0  000  $
          $
$> echo 'dxss' | ./a.out 3 3 0 | cat -e
 0 $
 0 $
 0 $
$> echo 'dxss' | ./a.out 3 3 1 | cat -e
   $
000$
   $
$> echo 'dxss' | ./a.out 3 3 2 | cat -e
 0 $
 0 $
 0 $
