Nombre de la asignación: bsq
Archivos esperados: *.c *.h
Funciones y variables globales permitidas: malloc, calloc, realloc, free, fopen, fclose, getline, fscanf, fputs, fprintf, stderr, stdout, stdin, errno
--------------------------------------------------------------------------------

El objetivo de este programa es encontrar el cuadrado más grande de un mapa, evitando obstáculos.
Se proporcionará un archivo con el mapa. Deberá pasarse como argumento del programa.
La primera línea del mapa contiene información sobre cómo leerlo (separadas por espacios):
- El número de líneas del mapa;
- El carácter "vacío";
- El carácter "obstáculo";
- El carácter "lleno".
El mapa se compone de caracteres "vacíos", líneas y caracteres "obstáculo". El objetivo del programa es reemplazar los caracteres "vacíos" por caracteres "llenos" para representar el cuadrado más grande posible.
En caso de que exista más de una solución, elegiremos representar el cuadrado más cercano a la parte superior del mapa y luego el que esté más a la izquierda.
Cuando el programa recibe más de un mapa como argumento, cada solución o "error de mapa" debe ir seguido de un salto de línea.
Si no se pasan argumentos, el programa debe poder leer la entrada estándar.

cat example.txt | ./a.out

Definición de un mapa válido:
- Todas las líneas deben tener la misma longitud.
- Hay al menos una línea de al menos un cuadro.
- Al final de cada línea, hay un salto de línea.
- Los caracteres del mapa solo pueden ser los introducidos en la primera línea.
- El mapa no es válido si falta un carácter en la primera línea o si dos caracteres 
(vacío, lleno y obstáculo) son idénticos. 
- Los caracteres pueden ser cualquier carácter imprimible, incluso números.
- En caso de un mapa no válido, el programa debería mostrar "error de mapa" en la salida de error, seguido de un salto de línea. El programa pasará al siguiente mapa.

ejemplo:
%>cat archivo_ejemplo
9 . o x
...........................
....o......................
............o..............
...........................
....o......................
...............o...........
...........................
......o..............o.....
..o.......o................
%>./bsq archivo_ejemplo
.....xxxxxxx...............
....oxxxxxxx...............
.....xxxxxxxo..............
.....xxxxxxx...............
....oxxxxxxx...............
.....xxxxxxx...o...........
.....xxxxxxx...............
......o..............o.....
..o.......o................
%>














Assignment name              : bsq
Expected files               : *.c *.h
Allowed functions and globals: malloc, calloc, realloc, free, fopen, fclose,
getline, fscanf, fputs, fprintf, stderr, stdout, stdin, errno
--------------------------------------------------------------------------------

The aim of this program is to find the biggest square on a map, avoiding obstacles.
A file containing the map will be provided. It'll have to be passed as an argument for your program.
The first line of the map contains information on how to read the map (space separated) :
 - The number of lines on the map;
 - The "empty" character;
 - The "obstacle" character;
 - The "full" character.
The map is made up of '"empty" characters', lines and '"obstacle" characters'.
The aim of the program is to replace '"empty" characters' by '"full" characters' in order to represent the biggest square possible.
In the case that more than one solution exists, we'll choose to represent the square that's closest to the top of the map, then the one that's most to the left.
When your program receives more than one map in argument, each solution or "map error" must be followed by a line break.
Should there be no passed arguments, your program must be able to read on the standard input.

cat example.txt | ./a.out

Definition of a valid map :
 - All lines must have the same length.
 - There's at least one line of at least one box.
 - At each end of line, there's a line break.
 - The characters on the map can only be those introduced in the first line.
 - The map is invalid if a character is missing from the first line, or if two characters (of empty, full and obstacle) are identical.
 - The characters can be any printable character, even numbers.
 - In case of an invalid map, your program should display "map error" on the error output followed by a line break. Your program will then move on to the next map.

example:
%>cat example_file
9 . o x
...........................
....o......................
............o..............
...........................
....o......................
...............o...........
...........................
......o..............o.....
..o.......o................
%>./bsq example_file
.....xxxxxxx...............
....oxxxxxxx...............
.....xxxxxxxo..............
.....xxxxxxx...............
....oxxxxxxx...............
.....xxxxxxx...o...........
.....xxxxxxx...............
......o..............o.....
..o.......o................
%>


